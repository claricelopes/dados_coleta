import requests
import time
import random

# URL base da API CrossRef
base_url = "https://api.crossref.org/works"

# Lista de palavras-chave relacionadas ao CI da UFPB
palavras_chave = [
    "Centro de Inform√°tica UFPB", "Center for Informatics UFPB", 
    "Computa√ß√£o UFPB", "Computer Science UFPB", 
    "Intelig√™ncia Artificial UFPB", "Artificial Intelligence UFPB", 
    "Ci√™ncia de Dados UFPB", "Data Science UFPB", 
    "Machine Learning UFPB", "Vis√£o Computacional UFPB", 
    "Computer Vision UFPB", "Processamento de Linguagem Natural UFPB", 
    "Natural Language Processing UFPB", "Engenharia de Software UFPB", 
    "Software Engineering UFPB", "Desenvolvimento de Software UFPB", 
    "Arquitetura de Software UFPB", "Software Architecture UFPB", 
    "Sistemas Distribu√≠dos UFPB", "Distributed Systems UFPB", 
    "Seguran√ßa da Informa√ß√£o UFPB", "Information Security UFPB", 
    "Criptografia UFPB", "Cryptography UFPB", "Redes de Computadores UFPB", 
    "Computer Networks UFPB", "Computa√ß√£o em Nuvem UFPB", "Cloud Computing UFPB",
    "Computa√ß√£o Gr√°fica UFPB", "Computer Graphics UFPB", 
    "Intera√ß√£o Humano-Computador UFPB", "Human-Computer Interaction UFPB",
    "Realidade Virtual UFPB", "Virtual Reality UFPB", 
    "Realidade Aumentada UFPB", "Augmented Reality UFPB", 
    "Computa√ß√£o Qu√¢ntica UFPB", "Quantum Computing UFPB", 
    "Otimiza√ß√£o UFPB", "Optimization UFPB", 
    "Computa√ß√£o Paralela UFPB", "Parallel Computing UFPB"
]

# N√∫mero m√°ximo de artigos por busca (limite da API CrossRef √© 100)
num_artigos = 100  

# Quantidade m√°xima de tentativas em caso de erro
max_tentativas = 3  

# Percorre cada palavra-chave e realiza a busca
for palavra in palavras_chave:
    print(f"\nüîé Buscando artigos para: {palavra}")
    
    # Define os par√¢metros da busca
    params = {"query": palavra, "rows": num_artigos}
    
    tentativa = 0
    sucesso = False
    
    while tentativa < max_tentativas and not sucesso:
        try:
            # Faz a requisi√ß√£o GET
            response = requests.get(base_url, params=params, timeout=20)
            
            if response.status_code == 200:
                data = response.json()
                
                if "message" in data and "items" in data["message"]:
                    articles = data["message"]["items"]
                    
                    # Filtrar apenas os artigos que mencionam "UFPB"
                    artigos_ufpb = []
                    for article in articles:
                        title = article.get("title", ["Sem t√≠tulo"])[0]
                        link = article.get("URL", "Sem link dispon√≠vel")
                        authors = article.get("author", [])

                        # Verifica se algum autor tem afilia√ß√£o com "UFPB"
                        for author in authors:
                            if "affiliation" in author:
                                for aff in author["affiliation"]:
                                    if "UFPB" in aff.get("name", ""):
                                        artigos_ufpb.append((title, link))
                                        break
                    
                    # Exibe os resultados filtrados
                    if artigos_ufpb:
                        for title, link in artigos_ufpb:
                            print(f"T√≠tulo: {title}")
                            print(f"Link: {link}")
                            print("-" * 50)
                    else:
                        print("Nenhum artigo da UFPB encontrado.")

                    sucesso = True  # Sai do loop de tentativas

                else:
                    print("Resposta inesperada da API.")
                    tentativa += 1
            else:
                print(f"Erro ao acessar a API: {response.status_code}")
                tentativa += 1

        except requests.exceptions.RequestException as e:
            print(f"Erro na requisi√ß√£o: {e}")
            tentativa += 1
        
        # Se a tentativa falhou, espera antes de tentar novamente
        if not sucesso and tentativa < max_tentativas:
            tempo_espera = round(random.uniform(10, 30), 2)
            print(f"Tentativa falhou. Tentando novamente em {tempo_espera} segundos...\n")
            time.sleep(tempo_espera)

    # Aguarda entre 20 e 40 segundos antes da pr√≥xima palavra-chave
    tempo_espera = round(random.uniform(20, 40), 2)
    print(f"Aguardando {tempo_espera} segundos antes da pr√≥xima busca...\n")
    time.sleep(tempo_espera)
